name: Erlang CI

on:
  pull_request:
  push:
    branches: [ main ]

env:
  REBAR3_VERSION: '3.23.0'

jobs:
  test:
    name: OTP ${{ matrix.otp }} â€“ Ubuntu
    runs-on: ubuntu-latest

    strategy:
      matrix:
        otp: [24, 25, 26]

    services:
      couchdb:
        image: couchdb:3
        ports:
          - 5984:5984
        env:
          COUCHDB_USER: admin
          COUCHDB_PASSWORD: admin
        options: >-
          --name couchdb
          --health-cmd "curl -f http://localhost:5984/_up || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      COUCHDB_URL: http://admin:admin@localhost:5984

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Erlang/OTP ${{ matrix.otp }}
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ matrix.otp }}
          rebar3-version: ${{ env.REBAR3_VERSION }}

      - name: Cache rebar3 deps & build
        uses: actions/cache@v4
        with:
          path: _build
          key: ${{ runner.os }}-rebar3-${{ matrix.otp }}-${{ hashFiles('rebar.config', 'rebar.lock', 'src/**/*.erl') }}
          restore-keys: |
            ${{ runner.os }}-rebar3-${{ matrix.otp }}-

      - name: Make test script executable
        run: chmod +x ./run_test.sh

      - name: Wait for CouchDB to be ready
        run: |
          echo "Waiting for CouchDB to be healthy..."
          for i in {1..30}; do
            if curl -fs http://admin:admin@localhost:5984/_up >/dev/null; then
              echo "CouchDB is up!" && break
            fi
            sleep 2
          done

      - name: Run test suite
        run: ./run_test.sh

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-otp-${{ matrix.otp }}
          path: _build/test/cover

  # ---------------------------------------------------------
  # Publish the coverage report from OTP 26 run to GitHub Pages
  publish-coverage:
    needs: test
    if: success() && github.event_name == 'push'   # deploy only on push (not PR)
    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}

    # Grant the job permission to deploy to Pages
    # Required permissions to deploy to Pages
    permissions:
      contents: read      # to read the repository contents / artifacts
      actions: read       # to fetch the artifact
      pages: write        # to deploy to Pages
      id-token: write     # to authenticate to GitHub Pages

    steps:
      - name: Download coverage artifact (OTP 26)
        uses: actions/download-artifact@v4
        with:
          name: coverage-otp-26
          path: public                       # GitHub Pages expects this dir

      # Upload the files as a Pages artifact
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v3
        with:
          artifact_name: github-pages
